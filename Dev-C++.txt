Building with Dev-C++

These instructions have been written using Dev-C++ 4.9.8.0. Other
versions may differ slightly.

First, the Dev-C++ environment is slow. If it doesn't seem to be
doing anything, it probably is, but it's doing it very slowly. If
you wait a while, it should finish what it was doing and let you
continue working. The wait can range from a few seconds to several
minutes. Loading the project file takes about two minutes on my
machine. Changing an editor option takes several minutes. Saving a
single file is slow. Using Save All is faster. Adding files to a
project is also slow.

Be sure you go to Tool->Compiler Options, Directories tab and tell
Dev-C++ where your include and library directories are. Make sure
that the DirectX directories are listed. vUpdate may or may not have
added to them the list. You need to update the directories in both
the C Includes and C++ Includes tabs; Dev-C++ likes to use the C
Includes list for C++ source files. Note that you must click the Add
button after entering the directory name, or it will not actually be
added to the list. It's also a good idea to add the FMOD api/lib and
api/inc directories to these lists here. On the Binaries tab, add
the directory that contains nasmw.exe, so you can build the assembly
files.

If you are lucky, hitting the Compile Button (Ctrl+F9) will build a
working executable called zdoomgcc.exe in the project file's parent
directory. This file has optimizations on and debugging info is
stripped. If you want to use GDB with it, you will need to go to
Project->Project Options, Paremeters tab and add -g to each Compiler
list and remove -s from the Linker list. Perhaps there is some way
to set up different debug and release configurations with Dev-C++ to
automate this process, but I haven't found it.

The GCC-generated version of ZDoom is significantly larger than the
Visual C++ version and lacks the ability to gather crash information
without the OS's intervention, so I don't consider it to be as good
as the Visual C++ version, but it seems to run just as well with
approximately the same performance.

A word of warning: If you modify a header file, Dev-C++ will not
rebuild the affected files, so watch out for this if you're playing
with the source.
