// Emacs style mode select	 -*- C++ -*- 
//-----------------------------------------------------------------------------
//
// $Id:$
//
// Copyright (C) 1993-1996 by id Software, Inc.
//
// This source is available for distribution and/or modification
// only under the terms of the DOOM Source Code License as
// published by id Software. All rights reserved.
//
// The source is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// FITNESS FOR A PARTICULAR PURPOSE. See the DOOM Source Code License
// for more details.
//
// DESCRIPTION:
//		Thing frame/state LUT,
//		generated by multigen utilitiy.
//		This one is the original DOOM version, preserved.
//
//-----------------------------------------------------------------------------

#ifndef __INFO_H__
#define __INFO_H__

#include "dobject.h"
#include "dthinker.h"
#include "farchive.h"

struct FState
{
	union
	{
		char name[4];
		int index;
	} sprite;
	int			frame;
	int			tics;
	actionf_t 	action;
	FState		*nextstate;
	int			misc1, misc2;
};


#if _MSC_VER
#define _S__COMMON_(spr) \
	{ {{(char)(#@spr>>24),(char)(#@spr>>16),(char)(#@spr>>8),(char)#@spr}}
#else
#define _S__COMMON_(spr) \
	{ {#spr}
#endif

#define _S_N_COMMON_(spr,frm,tic,cmd,next) \
	_S__COMMON_(spr), (frm) - 'A', tic, {cmd}, next

#define _S_B_COMMON_(spr,frm,tic,cmd,next) \
	_S__COMMON_(spr), 0x8000 | ((frm) - 'A'), tic, {cmd}, next

/* <winbase.h> #defines its own, completely unrelated S_NORMAL.
 * Since winbase.h will only be included in Win32-specific files that
 * don't define any actors, we can safely avoid defining it here.
 */

#ifndef S_NORMAL
#define S_NORMAL(spr,frm,tic,cmd,next) \
	_S_N_COMMON_(spr,frm,tic,cmd,next), 0, 0}
#endif

#define S_BRIGHT(spr,frm,tic,cmd,next) \
	_S_B_COMMON_(spr,frm,tic,cmd,next), 0, 0}

#define S_NORMAL2(spr,frm,tic,cmd,next,m1,m2) \
	_S_N_COMMON_(spr,frm,tic,cmd,next), m1, m2}

#define S_BRIGHT2(spr,frm,tic,cmd,next,m1,m2) \
	_S_B_COMMON_(spr,frm,tic,cmd,next), m1, m2}


#ifndef EGAMETYPE
#define EGAMETYPE
enum EGameType
{
	GAME_Any	 = 0,
	GAME_Doom	 = 1,
	GAME_Heretic = 2,
	GAME_Hexen	 = 4,
	GAME_Raven	 = 6
};
#endif

struct FActorInfo
{
	int doomednum;
	FState *spawnstate;
	int spawnhealth;
	FState *seestate;
	char *seesound;
	int reactiontime;
	char *attacksound;
	FState *painstate;
	int painchance;
	char *painsound;
	FState *meleestate;
	FState *missilestate;
	FState *crashstate;
	FState *deathstate;
	FState *xdeathstate;
	FState *bdeathstate;
	FState *ideathstate;
	char *deathsound;
	int speed;
	int radius;
	int height;
	int mass;
	int damage;
	char *activesound;
	int flags;
	int flags2;
	int flags3;
	FState *raisestate;
	int translucency;
	int spawnid;

	FState *OwnedStates;
	int NumOwnedStates;
};

class FActorInfoInitializer
{
public:
	FActorInfoInitializer (EGameType game, const TypeInfo *actorinfo, void (*setdefs)(FActorInfo *))
		: gamemode (game),
		  active (0),
		  info (actorinfo),
		  setdefaults (setdefs)
	{
		next = StaticInitList;
		StaticInitList = this;
	}
	static void StaticInit (EGameType game);
	static void StaticSetDefaults (EGameType game);

private:
	DWORD gamemode:31;
	DWORD active:1;
	const TypeInfo *info;
	void (*setdefaults)(FActorInfo *);
	FActorInfoInitializer *next;

	static FActorInfoInitializer *StaticInitList;

	friend FArchive &operator<< (FArchive &arc, FState *&state);
};

#define REGISTER_ACTOR(spawnclass, game) \
	static FActorInfoInitializer info_##spawnclass##_init (GAME_##game, RUNTIME_CLASS(spawnclass), &spawnclass::SetDefaults);

#define DECLARE_STATELESS_ACTOR(cls,parent) \
		DECLARE_SERIAL(cls,parent); \
	public: \
		cls () {} \
		static void SetDefaults (FActorInfo *info);

#define DECLARE_ACTOR(cls,parent) \
	DECLARE_STATELESS_ACTOR(cls,parent); \
	static FState States[];

#define __INHERIT__				Super::SetDefaults (info); info->doomednum = -1; info->spawnid = 0;
#define INHERIT_DEFS			{__INHERIT__ info->OwnedStates = &States[0]; info->NumOwnedStates = sizeof(States)/sizeof(States[0]);}
#define INHERIT_DEFS_STATELESS	{__INHERIT__ info->OwnedStates = NULL; info->NumOwnedStates = 0;}
#define ACTOR_DEFS_STATELESS	{INHERIT_DEFS_STATELESS info->spawnstate = &AActor::States[0];}

class FDoomEdMap
{
public:
	const TypeInfo *FindType (int doomednum);
	void AddType (int doomednum, const TypeInfo *type);

private:
	enum { DOOMED_HASHSIZE = 256 };

	struct FDoomEdEntry
	{
		FDoomEdEntry *HashNext;
		int DoomEdNum;
		const TypeInfo *Type;
	};

	static FDoomEdEntry *DoomEdHash[DOOMED_HASHSIZE];
};

extern FDoomEdMap DoomEdMap;

#endif	// __INFO_H__
